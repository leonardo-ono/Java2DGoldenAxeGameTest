package infra;


import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 * Golden Axe - Title screen test
 * 
 * @author Leonardo Ono (ono.leo80@gmail.com);
 */
public class View extends JPanel {
    
    private AlphaComposite[] alphaComposites = new AlphaComposite[256];
    
    double by = 0;
    double bvy = 0;
    long changeBDirectionTime;
    boolean bDirectionChanged;
    double balpha = 255;
    
    double ky = 100;
    
    private List<Sprite1> sprites = new ArrayList<>();
    
    public View() {
        for (int i = 0; i < 256; i++) {
            alphaComposites[i] = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, i / 255f);
        }
    }

    public void start() {
        Resource.loadSpriteSheet("/res/image/title.png", "/res/image/sprite_sheet.txt");
        addKeyListener(new Input());
        bvy = 4;
        changeBDirectionTime = System.currentTimeMillis() + 2500;
        bDirectionChanged = false;
        
        // add all sprites with "z order"
        sprites.add(Resource.getSprite("kanji")[0]);
        for (int i = 0; i < 9; i++) {
            sprites.add(Resource.getSprite("letter")[i]);
        }
        
        Audio.start();
        //Audio.loadMusic(1, "/res/music/intro.mid");
        //Audio.playMusic(1);
        
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        update();
        draw((Graphics2D) g);
        try {
            Thread.sleep(1000 / 60);
        } catch (InterruptedException ex) {
        }
        repaint();
    }
    
    private void update() {
        by += bvy;
        
        if (bvy > 0 && by > 207) {
            by -= 207;
        }
        if (bvy < 0 && by < 0) {
            by += 207;
        }
        
        if (!bDirectionChanged && System.currentTimeMillis() >= changeBDirectionTime) {
            bvy -= 0.1;
            if (bvy < -1) {
                bDirectionChanged = true;
                bvy = -1;
            }
        }

        if (System.currentTimeMillis() >= changeBDirectionTime) {
            balpha -= 8;
            if (balpha < 0) {
                balpha = 0;
            }
        }
        
        for (int i = 0; i < letterIndexes.length; i++) {
            letterIndexes[i] += 2;
            if (letterIndexes[i] > letters[i].length - 1) {
                letterIndexes[i] = letters[i].length - 2;
            }
        }
        
        ky -= 1;
        if (ky < 0) {
            ky = 0;
        }
    }
    
    private void draw(Graphics2D g) {
        g.clearRect(0, 0, getWidth(), getHeight());
        g.drawLine(0, 0, getWidth(), getHeight());
        
        g.scale(2.5, 2.5);
        
        Resource.getSprite("background_darker")[0].draw(g, 0, (int) (-207 + by), false);
        //Resource.getSprite("background_darker")[0].draw(g, 0, (int) (0 + by), false);
        
        Composite originalComposite = g.getComposite();
        g.setComposite(alphaComposites[(int) balpha]);
        Resource.getSprite("background")[0].draw(g, 0, (int) (-207 + by), false);
        //Resource.getSprite("background")[0].draw(g, 0, (int) (0 + by), false);
        g.setComposite(originalComposite);
        
        //Resource.getSprite("kanji")[0].draw(g, 35, (int) (16 + ky), false);
        Resource.getSprite("kanji")[0].set(35, (int) (16 + ky));
        Resource.getSprite("kanji")[0].setZ(55);
        
        int lx = 357, ly = 256;
        for (int li = 0; li < letters.length; li++) {
            try {
                //Resource.getSprite("letter")[li].draw(g, letters[li][letterIndexes[li]] - lx, letters[li][letterIndexes[li] + 1] - ly, false);
                Resource.getSprite("letter")[li].set(letters[li][letterIndexes[li]] - lx, letters[li][letterIndexes[li] + 1] - ly);
                Resource.getSprite("letter")[li].setZ(letters[li][letterIndexes[li] + 1] - ly);
            }
            catch (Exception e) {
                System.out.println("error");
            }
        }
        
        Collections.sort(sprites);
        sprites.forEach(sprite -> sprite.draw(g, false));
        
//        Resource.getSprite("letter")[0].draw(g, 24 + 16 - 16, 105, false);
//        Resource.getSprite("letter")[1].draw(g, 24 + 40 - 16, 105, false);
//        Resource.getSprite("letter")[2].draw(g, 24 + 64 - 16, 105, false);
//        Resource.getSprite("letter")[3].draw(g, 24 + 88 - 16, 105, false);
//        Resource.getSprite("letter")[4].draw(g, 24 + 112 - 16, 105, false);
//        Resource.getSprite("letter")[5].draw(g, 24 + 136 - 16, 105, false);
//        Resource.getSprite("letter")[6].draw(g, 24 + 172 - 16, 105, false);
//        Resource.getSprite("letter")[7].draw(g, 24 + 196 - 16, 105, false);
//        Resource.getSprite("letter")[8].draw(g, 24 + 220 - 16, 105, false);

        
        if (balpha == 0) {
            //Resource.getSprite("sega")[0].draw(g, 105, 174, false);
            Resource.getSprite("sega")[0].draw(g, 10, 176, false);

            Resource.getSprite("blood")[0].draw(g, 125, 19, false);

            Text.draw(g, "(C)SEGA 1989", 20, 18, Color.WHITE, Color.RED);
            Text.draw(g, "(C)O.L. 2021", 20, 19, Color.WHITE, Color.RED);

            if (((int) (System.nanoTime() * 0.000000005)) % 3 < 2) {
                Text.draw(g, "PRESS SPACE TO START", 5, 16, Color.WHITE, Color.BLUE);
            }
        }
        
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            View view = new View();
            view.setPreferredSize(new Dimension((int) (276 * 2.5), (int) (207 * 2.5)));
            JFrame frame = new JFrame();
            frame.setTitle("Java Golden Axe - Title Screen / Test #5");
            frame.getContentPane().add(view);
            frame.setResizable(false);
            frame.pack();
            //frame.setLocationRelativeTo(null);
            frame.setLocation(150, 100);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);
            view.requestFocus();
            view.start();
        });
    }
    
    private int letterIndexes[] = new int[9];
int[][] letters = { 
{ 654,454,638,453,622,452,606,450,590,449,574,448,558,446,542,445,526,443,510,440,495,437,479,434,463,431,448,428,432,424,416,420,401,415,386,410,371,404,356,398,342,391,329,382,317,371,309,357,309,342,317,329,332,322,347,317,363,313,378,310,394,308,410,306,426,305,442,304,458,303,474,303,490,303,506,304,522,304,538,305,554,307,570,309,585,312,601,316,615,322,615,336,602,345,586,349,570,351,554,353,539,354,523,355,507,356,491,356,475,356,459,356,443,355,427,355,411,353,395,351,379,349,363,345,348,341,340,329,349,317,364,311,380,308,396,306,412,304,428,304,444,303,460,302,476,302,492,302,508,302,524,303,540,304,555,306,571,308,587,311,603,315,617,322,615,337,601,345,585,347,569,348,553,349,537,350,521,351,505,352,489,354,473,355,458,356,442,357,426,358,410,359,385,360,381,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,656,455,640,453,624,452,608,450,592,449,576,448,560,446,544,445,528,443,512,441,497,438,481,434,465,431,450,428,434,425,418,421,403,416,388,410,373,405,358,399,344,392,330,383,318,373,310,359,308,343,316,330,330,322,345,317,361,314,376,310,392,308,408,306,424,305,440,304,456,304,472,303,488,303,504,303,520,304,536,305,552,307,568,309,583,311,599,315,614,321,616,335,603,344,588,348,572,351,556,353,540,354,525,355,509,356,493,356,477,356,461,356,445,355,429,355,413,353,397,351,381,349,365,346,350,342,339,331,348,318,362,311,378,308,394,306,410,305,426,304,442,303,458,302,474,302,490,302,506,302,522,303,538,304,554,306,569,308,585,310,601,314,615,320,616,335,603,344,587,347,571,348,555,350,539,351,523,352,507,353,492,354,476,355,460,357,444,358,428,359,405,360,405,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,660,455,644,454,628,452,612,451,596,449,580,448,564,447,548,445,532,444,516,442,500,438,485,435,469,432,453,429,438,426,422,422,407,417,392,412,377,406,362,401,348,394,334,386,321,375,312,363,308,347,313,333,326,324,341,319,357,314,372,311,388,308,404,307,420,305,436,304,452,304,468,303,484,303,500,303,516,304,532,305,548,306,564,308,579,311,595,314,610,319,618,331,607,342,592,348,576,350,560,352,544,354,529,355,513,355,497,356,481,356,465,356,449,355,433,355,417,354,401,352,385,350,369,347,354,343,340,335,345,320,358,312,374,309,390,307,406,305,422,304,438,303,454,302,470,302,486,302,502,302,518,302,534,304,550,305,565,307,581,310,597,313,612,318,618,331,607,343,591,347,575,348,559,350,543,351,528,352,512,354,496,355,480,356,464,358,448,359,429,360,429,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,664,455,648,454,632,452,616,451,600,450,584,448,568,447,552,446,536,444,520,442,504,439,489,436,473,433,457,430,442,426,426,423,411,418,396,413,381,408,366,402,351,396,337,388,324,378,314,366,308,351,311,336,323,326,337,320,353,315,368,312,384,309,400,307,416,306,432,304,448,304,464,303,480,303,496,303,512,304,528,305,544,306,560,308,576,310,591,313,607,317,618,327,610,340,596,347,580,350,564,352,548,354,533,355,517,355,501,356,485,356,469,356,453,355,437,355,421,354,405,352,389,351,373,348,357,344,343,338,342,323,355,314,370,310,386,307,402,305,418,304,434,303,450,303,466,302,482,302,498,302,514,302,530,303,546,305,561,307,577,309,593,312,608,317,618,328,610,341,595,346,579,348,563,350,548,352,532,353,516,355,500,356,484,358,461,360,453,361,453,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,666,455,652,454,636,453,620,451,604,450,588,449,572,447,556,446,540,445,524,443,508,440,493,437,477,434,461,430,446,427,430,424,415,420,399,414,384,409,369,404,355,397,340,390,327,381,316,370,309,355,309,340,319,328,334,321,349,316,364,313,380,309,396,308,412,306,428,305,444,304,460,303,476,303,492,303,508,304,524,304,540,305,556,307,572,309,587,312,603,316,617,323,614,338,600,345,584,349,568,351,552,353,537,355,521,355,505,356,489,356,473,356,457,356,441,355,425,354,409,353,393,351,377,348,361,345,346,340,340,327,351,316,366,310,382,308,398,306,414,304,430,303,446,303,462,302,478,302,494,302,510,302,526,303,542,304,557,306,573,308,589,311,605,315,618,324,613,338,599,345,583,348,568,350,552,352,536,354,520,356,504,357,479,360,477,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,656,455,640,453,624,452,608,450,592,449,576,448,560,446,544,445,528,443,512,441,497,438,481,434,465,431,450,428,434,425,418,421,403,416,388,410,373,405,358,399,344,392,330,383,318,373,310,359,308,343,316,330,330,322,345,317,361,314,376,310,392,308,408,306,424,305,440,304,456,304,472,303,488,303,504,303,520,304,536,305,552,307,568,309,583,311,599,315,614,321,616,335,603,344,588,348,572,351,556,353,540,354,525,355,509,356,493,356,477,356,461,356,445,355,429,355,413,353,397,351,381,349,365,346,350,342,339,331,348,318,362,311,378,308,394,306,410,305,426,304,442,303,458,302,474,302,490,302,506,302,522,303,538,304,554,306,569,308,585,310,601,314,615,320,616,335,603,344,588,348,572,351,556,353,540,355,524,357,501,360,501,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,660,455,644,454,628,452,612,451,596,449,580,448,564,447,548,445,532,444,516,442,500,438,485,435,469,432,453,429,438,426,422,422,407,417,392,412,377,406,362,401,348,394,334,386,321,375,312,363,308,347,313,333,326,324,341,319,357,314,372,311,388,308,404,307,420,305,436,304,452,304,468,303,484,303,500,303,516,304,532,305,548,306,564,308,579,311,595,314,610,319,618,331,607,342,592,348,576,350,560,352,544,354,529,355,513,355,497,356,481,356,465,356,449,355,433,355,417,354,401,352,385,350,369,347,354,343,340,335,345,320,358,312,374,309,390,307,406,305,422,304,438,303,454,302,470,302,486,302,502,302,518,302,534,304,550,305,565,307,581,310,597,313,612,318,618,331,607,343,592,348,576,352,561,356,538,360,537,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,664,455,648,454,632,452,616,451,600,450,584,448,568,447,552,446,536,444,520,442,504,439,489,436,473,433,457,430,442,426,426,423,411,418,396,413,381,408,366,402,351,396,337,388,324,378,314,366,308,351,311,336,323,326,337,320,353,315,368,312,384,309,400,307,416,306,432,304,448,304,464,303,480,303,496,303,512,304,528,305,544,306,560,308,576,310,591,313,607,317,618,327,610,340,596,347,580,350,564,352,548,354,533,355,517,355,501,356,485,356,469,356,453,355,437,355,421,354,405,352,389,351,373,348,357,344,343,338,342,323,355,314,370,310,386,307,402,305,418,304,434,303,450,303,466,302,482,302,498,302,514,302,530,303,546,305,561,307,577,309,593,312,608,317,618,328,610,341,596,348,581,354,561,360,561,360}, 
{ 667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,667,456,666,455,652,454,636,453,620,451,604,450,588,449,572,447,556,446,540,445,524,443,508,440,493,437,477,434,461,430,446,427,430,424,415,420,399,414,384,409,369,404,355,397,340,390,327,381,316,370,309,355,309,340,319,328,334,321,349,316,364,313,380,309,396,308,412,306,428,305,444,304,460,303,476,303,492,303,508,304,524,304,540,305,556,307,572,309,587,312,603,316,617,323,614,338,600,345,584,349,568,351,552,353,537,355,521,355,505,356,489,356,473,356,457,356,441,355,425,354,409,353,393,351,377,348,361,345,346,340,340,327,351,316,366,310,382,308,398,306,414,304,430,303,446,303,462,302,478,302,494,302,510,302,526,303,542,304,557,306,573,308,589,311,605,315,618,324,613,338,601,348,585,360,585,360}, 
};


}
